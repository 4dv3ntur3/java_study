package oop_class;

public class class_example {
	
	// 클래스 이름은 대문자로

	/*
	 * 객체를 정의, 객체 기능 구현, 객체 사이의 협력 구현
	 * 클래스: 객체에 대한 속성과 기능을 코드로 구현한 것
	 * 클래스를 정의한다
	 * 객체에 대한 청사진
	 * 
	 * ex) 학생 클래스
	 * 속성: 학번, 이름, 학년, 사는 곳
	 * 기능: 수강 신청하기, 수업 듣기, 시험 보기 (학생 클래스가 할 수 있는 일. 해야 하는 일)
	 * 
	 * 객체의 특성=속성=멤버 변수=property, attribute
	 * 객체의 기능=메서드(자바)=멤버 함수(C 계열)
	 * 
	 * 
	 클래스 정의하기
	 
	 (접근 제어자) class class이름 {
	 
	 	멤버 변수;
	 	메서드;
	 
	 
	 
	 
	 }
	 
	 # 메서드
	 함수의 일종
	 객체의 기능을 제공하기 위해 클래스 내부에 구현되는 함수
	 
	 함수 = 하나의 기능을 수행하는 일련의 코드
	 숫자 두 개를 더한다, 가장 좋은 성적 둘을 더한다, 두 거리를 더한다
	 -> 더하기 함수를 만들어서 활용
	 
	 중복되는 기능은 함수로 구현, 이 함수를 호출해서 사용 (재활용)
	 
	 # 함수 정의
	 반환형 함수이름 (매개변수들) {
	 
	 	// 기능 작성
	 	return 결과값; (void의 경우는 없을 수도 있음) 
	 
	 }
	 
	 int add (int num1, int num2) {
	 
	 	int result;
	 	result = num1+num2;
	 	return result;
	 
	 }
	 
	 # 함수를 쓰는 이유?
	 코드를 구별, 분리하여 효율적으로 사용
	 기능별로 분리해서 필요할 때마다 호출해서 사용 가능
	 
	 하나의 기능을 함수의 이름에 맞게 구현하는 게 적절하다!
	 
	 
	 # 클래스와 인스턴스 
	 new 예약어 이용해서 생성!!!
	 
	 클래스이름 객체이름 = new 생성자;
	 
	 # 인스턴스와 힙 메모리
	 하나의 클래스 코드 -> 여러 개의 인스턴스
	 인스턴스는 힙 메모리에 생성. 
	 각각의 인스턴스는 다른 메모리 주소를 가짐. 각각의 독립적 힙 메모리.
	 
	 Park, Kim은 둘 다 지역변수임. 
	 힙 = 동적 메모리. 필요시에 할당받음. 
	 스택 = 함수가 끝나면 자연히 메모리가 사라짐.
	 힙은 new라는 키워드로 생성. 자동으론 안 없어지고 없애 줘야 함.
	 C++에서는 직접 없애야 하나 java는 GC가 주기적으로 돌면서 쓰지 않는 메모리 수거. (Garbage Collector)
	 
	 Student 멤버변수들이 heap 메모리에 잡힘. 이름, id, address, grade
	 그 주소가 Park에 저장되므로 name, id, address에 접근 가능
	 Kim도 마찬가지 
	 
	 
	 # 생성자
	 
	 // 객체를 생성하면서 하고 싶은 일들. (무조건 학생 이름을 갖고 생성해야 된다 등)
	 // 기본 생성자. 자바 컴파일러가 넣어 줌.
	 // 생성자가 없는 경우에 알아서 추가해 줌 ㅇㅇ
	 // 컴파일러가 해 주는 건 매개변수도 없고 코드도 없음
	 // 생성자가 하나도 없을 때만 생기고, 하나라도 있으면 기본 생성자 안 생김
 	 // 상속 안 되고, 리턴값 없음
	 public Student() {
	 
	 } 
	 

	 	
	 	
	 
	 
	
	 * 
	 * */
	
}

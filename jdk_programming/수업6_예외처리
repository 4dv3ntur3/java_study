# 예외 처리
java: 안정적 프로그래밍을 중요시
여러 오류에 대해 핸들링할 수 있도록 컴파일러가 지원함

오류
1) 컴파일 오류: 프로그램 코드 작성 중 발생하는 문법적 오류. IDE에서 작성하다가 빨간 줄

2) 실행 오류: 실행 중인 프로그램이 의도치 않은 동작을 하거나 (bug) 프로그램이 중지되는 오류
이상한 값이 디비에 인서트되거나...
-> 잡기 어렵다
-> 시스템이 죽기 때문에 서비스 운영에 치명적
-> 오류가 발생하는 경우 로그를 남겨서 추후 분석 -> 원인 파악

서비스 죽지 않게 & 로그 작성
error의 하위에 있는 오류 클래스들은 시스템적인 오류라서 우리가 핸들링 불가
오버플로우 등

exception: 이 하위의 클래스들을 프로그래밍으로 핸들링 (예외)
프로그램에서 제어할수 있는 오류
파일이 존재하지 않는 경우, 네트워크 연결이 끊어진 경우

close()를 명시적으로 호출하지 않더라도 try{} 블록에서 열린 리소스는
정상적인 경우/ 예외 발생한 경우 모두 자동 해제

해당 리소스가 AutoCloseable을 구현해야 
단, FileInputStream의 경우 AutoCloseable을 구현하고 있음
finally 부를 필요 없다
자동으로 리소스 종료하기 위해서 (close하기 위해서)였기 때문

사용자 정의 예외
-이 매개변수 안에 이게 있어야 한다든가
-비밀번호 형식이라든가
-사용자 정의 예외 클래스 (custom exception)
extends Exception
실무에서는 로그를 남기기 위해 exception을 핸들링한다 
상황에 대한 로그를 정확히 남겨서 (메시지로) 
log: 여러 level이 있음 (얼마나 심각하냐에 따라서) 그 level을 가지고 프로그래밍을 함 


# 내부 클래스, 람다식, 스트림
-클래스 내부에 클래스를 또 정의할 수 있음
-흔히 쓰는 프로그래밍 방법은 아님
-private 선언하면 다른 클래스와 접점이 없음
-하나의 클래스에서 혼자 씀
-안드로이드 프로그래밍: 위젯 이벤트 핸들링(버튼 터치, 화면 터치)하는 이벤트 핸들러
-> 익명 내부 클래스(inner class)로 구현

-총 4가지 종류
인스턴스, 정적static, 지역local(메서드 내부)=변수랑 동일한 위치에 선언, 생성 방법도 동일

지역 익명 클래스: 외부 클래스의 메서드 안에 구현(이 메서드 내 local 변수 상수화 돼서 변경 불가!)
익명 내부 클래스: 변수에 대입해서 구현 
익명 내부 클래스:클래스 이름 없애고 사용하는 경우 (부를 일이 없어서)
익명 내부 클래스는 하나의 인터페이스나 하나의 추상 클래스만을 구현할 수 있다
구현하는 타입 선언하고 그 클래스를 선언하는 거라서 단 하나만 가능 
익명 내부 클래스를 제일 많이 쓴다

# 람다식*********
이걸로 함수형 프로그래밍 지원함 
자바: OOP
함수형 프로그래밍 방식이 유행, 장점 대두
java 8부터 제공

함수형 프로그래밍: 
매개변수: 함수가 돌아가기 위한 자료
그 자료를 받고 함수 수행
C언어: 다른 global 변수를 참조할 수도 있고 외부 변수를 가지고 같이 프로그래밍할 수 있음
pure function: 외부 자료 X, 매개변수로 받은 걸로만 이용
동일한 변수 들어오면 동일한 결과 return. 안정적
동일 함수 여러 번 수행해도 외부 자료(여러 메모리가 공유할 수도 있음) 에 영향 X (side effect X)

# 스트림
-이거랑 입출력 스트림이랑은 완전 다름
-자료가 있을 때 자료를 효율적으로 연산, sorting할 수 있도록 제공하는 객체
-일관성있는 연산
-배열에서 가장 큰 수? 배열 원소들의 합?
-> 일관성 있게 지원하는 연산자
-자료의 대상과 관계없이 동일한 연산 수행
-배열이든 콜렉션이든 상관없이 동일한 결과 
-기존 자료를 건드리지 않고 다른 메모리를 쓰기 때문에 연산 한번 수행하고 나면 소모됨
-중간연산: 조건 매칭
최종연산: 결과 출력, 합 구하기 등. 스트림은 최종연산까지 다 수행한 다음에 결과 확인 가능.
중간 연산 결과 확인 불가. = 지연연산

reduce 연산
정의된 연산이 아니라 프로그래머가 직접 지정하는 연산
최종연산: 스트림 소모하면서 수행
binaryoperator 인터페이스 
-> 두 개의 매개변수를 가지고 비교, 더하기 등
기존의 값에 새로 들어온 element를 어떻게?

내부 클래스를 이해 -> 람다식
람다식 이해 -> stream
데이터베이스와 유사하다 




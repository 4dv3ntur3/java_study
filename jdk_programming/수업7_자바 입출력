잘 분류해서 구분
클래스가 워낙 많고 쓰는 방법이 달라서 
입력도 받고, 직렬화도 하고, 파일에도 써 보고 등

# 스트림이란?
-객체의 어떤 일정한 연산을 하기 위한 것도 있긴 했음 (stream)

-이 스트림은 자료의 흐름이 물과 같다는 의미에서 유래
-다양한 입출력 장치에 독립적으로 일관성 있는 입출력 제공
-virtual passway로 자료가 흘러들어오고 흘러나감 = 스트림 (추상화해서)
-입출력은 예외처리를 꼭 같이 해줘야 함

입력출력 동시 X
입력 / 출력
바이트 단위로 / 문자 단위로 
출력할 타겟에 직접 생성돼서 읽고 씀 (기반 스트림)
읽고 쓰는 기능은 없음, 원래 있는 스트림한테 플러스 알파의 기능 제공 (보조 스트림)
ㄴ 버퍼링을 제공한다든가.. 

C언어는 read write 모드 동시에 가능하지만
자바는 입출력 동시에 하는 스트림은 없음 
일반적으로 따로 있다
보조 스트림은 혼자서는 못 돌아감. 생성자에 다른 스트림을 포함해야 함
기반스트림을 포함할 수도 있고 다른 보조 스트림일 수도 있고 

public class System {

	public static PrintStream out; // 이래서 System.out.println() 이라고 썼네... (new 안 하고)
	public static PrinstStream err; // 콘솔에서 빨간색으로 표시되는것 
}


# Scanner
System.in은 바이트 단위라서 한글 읽을 때 변환해야 하는데 
decorator 보조스트림 사용해야 함
얘는 생성자에 여러 요소 넣을 수 있음
생성자가 다양함 다양한 source로부터 자료 읽을 수 있고 메서드도 다양함 
system.in은 read -> character로 읽어도 int로 반환됨

# Console
eclipse는 아니고 cmd창에서


# 출력용 버퍼가 있음
버퍼가 어느 정도 차야 출력됨
버퍼가 어느 정도 차지 않아도 내보내고 싶으면 flush() cf. 채팅 프로그램
close() 모든 resoure write됨
close() 메서드 내부에서 flush() 호출됨(출력버퍼 비워짐)

# Reader
FileReader: 문자 단위로 읽는다 (한글까지 읽어진다)


# 보조 스트림
기반 스트림의 여러 기능을 플러스 알파로 도와주는 스트림
데코레이터 패턴이 적용되었음 
오리지널 기능이 없다 = 즉, 읽고 쓰는 게 없다
대신 다른 스트림에 부가돼서 추가적인 기능 제공


# 직렬화
여러 인스턴스를 그대로 저장 (object를)
받는 쪽에서 그대로 복원
저장하거나 쓰는 게 직렬화, 복원하는 게 역직렬화 



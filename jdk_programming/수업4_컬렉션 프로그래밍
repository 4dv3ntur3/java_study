# 제네릭 프로그래밍
컬렉션 프레임워크: 프로그래밍에 사용하는 자료구조, 알고리즘에 대한 라이브러리가 정의되어 있음
-array, 배열을 직접 구현하는 게 아니라 제공하는 걸 가져다 씀
-여러 자료형이 대체될 수 있도록 프로그래밍
-참조 자료형에서만 사용
-변수 선언, 메서드의 매겨변수를 여러 참조 자료형으로 변환할 수 있도록 프로그래밍하는 방식
-클래스를 사용하는 쪽에서 실제로 어떤 참조자료형을 쓸지 선택해서 코딩
-> 컴파일러가 검증하므로 type에 대해 안정적
-컬렉션 프레임워크에서 아주 많이 쓰인다 
대부분 컬렉션 프레임워크가 제네릭 프로그래밍으로 구현되어 있음


3D 프린터의 재료: 플라스틱, 파우더
이 두 개를 모두 사용해서 3D 프린터가 돌아갈 수 있도록 구현 
-> ThreeDPrinterPlastic, ThreeDPrinterPowder 이렇게 구현하는 게 아니라
Object Class를 받게끔 해서 매핑하도록!

-제네릭 클래스 정의
public class GenericPrint<T> // E, V도 많이 씀 (T 대신)
그리고 자료형 부분을 다 T로 

<> 다이아몬드 연산자
static 키워드는 T 앞에 쓸 수 없다: 인스턴스 생성과 상관없이 메모리를 잡음
그러므로 생성될 때 결정되는 T는 static으로 쓸 수 없다
자바 10부터 제네릭에서 자료형 추론 가능하므로 생략 가능
-> ArrayList<String> list = new ArrayList<>();

ArrayList<String> list = new ArrayList<String>();
 -> var list = new ArrayList<String>();
 
-제네릭 메서드
public class Point<T, V> {

public T getX() { return X; }

public V getY() { return Y; }


}

cf. C++의 템플릿 클래스 



# 컬렉션 프로그래밍 -> 자료구조, 알고리즘
자료를 어떻게 관리를 하느냐에 따라 알고리즘도 바뀌고 프로그래밍 방법도 달라진다
우리가 쓰려는 자료를 어떤 구조로 관리? 자료구조 
어떤 logic으로 구현? 알고리즘

어떤 것들을 어떨 때 쓴다!
배열: 선형 자료 구조. 일렬로 되어 있음. 논리적 구조=물리적 구조(주소값이 쭉 붙어있다) 
1) 고정 길이 
2) -> index 연산 가능 O(1) (맨 처음 주소를 알면 i번째 위치도 offset으로 찾을 수 있음)
단점: 배열은 중간에 빈 공간이 존재할 수 없다 
3) input, output, insert/delete에 들어가는 연산이 n개에 종속된다 (element 개수에 따라 연산 횟수가 달라짐)
O(n)
하나 삭제하면 최대 n-1개가 이동할 수 있다 
원소 추가하려면 새 배열 만들고 -> 복사해서 뒤에 하나 더 넣고...
java: ArrayList (객체 배열 구현)
	Vector(자바 1, 1.2)보다 ArrayList 더 많이 씀 , 동기화 지원 (멀티스레드에서) -> 단일 스레드에서 오버헤드 O


linked list
-배열의 단점 보완
A와 B 사이에 D 넣으려면 배열은 요소가 이동해야 하는데
D는 그냥 만든 다음 A가 D를 가리키게, A->B 끊고, D가 B를 가리키게 해 주면 됨
B 삭제하려면 그냥 다 끊고 D가 C 가리키게 하고 B는 해제 
-data와 그 다음 원소를 가리키는 link
-node
-fixed length X
-필요할 때마다 자료에 대한 node allocation -> next node 가리킴, previous node가 얘 가리키게
-물리적으로는 떨어져 있고 논리적으로는 붙어 있다
cf. doubled linked list, circular linked list
-요소가 계속 변하다 (IO가 자주 발생한다), 길이가 자주 바뀐다 -> Linked List
-index 연산이 조금 번거로움. 무조건 처음부터 해야 
-element 찾는 것 O(n)
jdk LinkedList



stack/queue
: 뭘로 구현하든 상관없음. 배열/linkedList 상관없다
항상 데이터의 추가와 삭제가 앞/뒤에서만 일어난다 

-stack:LIFO
-맨 위:top , top에서 들어오고 top에서 나간다
push()
pop()
가장 최근 정보 참조할 때 
바둑 게임에서 무르기, 두 수 무르기, 왔던 길 되돌아가기 

-queue: 배열과 유사
front/rear
rear -> front 방향
in할때는 rear (enQueue)
꺼낼 때는 front에서 (deQueue)
현실세계의 선착순. 가장 많이 쓰는 자료구조. FIFO
대기열
홈쇼핑, ARS 상담: 콜이 Queue에 들어가서 순서대로 dispatch가 되면서 하나씩 할당
element가 빈공간이 생길 수 있음 -> circularQueue도 있음

ArrayList로 Stack이나 Queue? 
add 하면 맨 뒤로
remove(arraylist.size()-1) 하면 끝에서니까 stack
remove(0)으로 하면 queue

# 데크
앞뒤 모두에서 

jdk의 stack 클래스
없는 거 꺼내면 underflow 발생 가능. 주의.
(비었는지 아닌지 확인)
peek: pop은 꺼내서 제거하는 건데 맨 위에 있는 원소만 그냥 반환. 일종의 get

큐
jdk의 ArrayList, LinkedList, Vector로 구현 가능


-Tree
Binary Search Tree: 자료의 검색. 중복 허용 불가
선형 X, 대칭 o
노드
나를 중심으로 leftChild: 다 나보다 작은 수여야 함
			rightChild: 다 나보다 큰 수

23 10 48 15 7 22 56

-> 23
23보다 10이 더 작음 -> left
48 -> right
15 -> left -> 10보다 크니까 10의 right
7 -> left -> 10보다 작으니까 10의 left
23 -> left -> 10보다 큼 -> 15보다도 큼 -> 15의 right
..

만약 1 2 3 4 5 -> 이러면 그냥 오른쪽으로 쭉쭉 뻗어나가는 tree임
tree 사용하는 이유: 노드가 두 개씩 분리되면서 검색의 속도가 빨라짐 (얘보다 크냐 안 크냐로 절반으로 뚝)
tree가 어느정도 양쪽 균형이 잡히면 log2N만큼 걸림
일렬 트리처럼 깊어져버리면 그냥 n만큼 걸림...
balance를 맞추기 위해 고안된 트리가 AVL, Red Black Tree
java: Treeset에서 red black tree로 구현되어 있음
BST가 만들어졌을 떄 sorting을 해서 데이터를 뽑을 수가 있다
in-order traverse: 트리 순회 (left -> 나 -> right)
7 -> 10 -> 15 -> 22 -> 23 -> 48 -> 56 (오름차순)이 됨 -> 좌우반전된 트리였으면 낼미차순이었겠지 
left가 없네? 나 -> right ... 

pre-order
post-order

-유일한 키 값
-루트 노드의 키값 기준
JDk;; TREESET treemap (red-black tree)


# 해싱
-산술 연산을 이용한 검색 방식
-검색을 위한 자료구조
-극장 좌석 100개 (0~99): 이차원 배열이라고 가정
-자리가 100개뿐인데 1번부터 300을 팔았다

55번 -> 
103번 -> 

어디에? 나중에 55번에 앉은 사람을 찾으러 올 수도 있음

55 % 100 -> 55
103 % 100 -> 3
제 친구가 55번 티켓을 가졌는데.. -> 그럼 55번 가서 데려오면 됨

203번 -> 203 % 100 -> 3번에 앉아야 함
충돌이 발생! collision -> 옆에 앉힘
-> 이러면 h(203) -> 3 자리에 가보면 203이 없다! 옆자리 가서 찾는다

55, 103 : key
% : hash function
저 자리들은 hash table
h(key) = index 이 인덱스 위치가 검색하거나 자료를 넣고뺴는 위치
hashCode: jvm이 인스턴스를 관리하는 방식이 해시방식 
key값에 따라 index가 정해진다 -> O(1) 산술연산! (자료 개수에 상관없이)
굉장히 빠름. 검색을 위한 연산.
python dictionary도 마찬가지. key-value

jdk: hashMap, hashSet

해시 함수를 잘 만드느냐에 따라 collision이 더 발생
-> collision 해결에 따라 또 알고리즘이 달라지고
검색 키 -> 해싱 함수 -> 검색 자료의 주소 




###### 컬렉션 프레임워크
-프로그램 구현에 필요한 자료구조를 구현해 놓은 라이브러리
-java.util 패키지
-java -> jdk 버전 -> lib -> src.zip -> 해제 -> 자바 source
-> java_base -> java -> java -> util 밑에 있음

collection 계열					/ map 계열: hashTable(java 1.2) hashmap 더 잘 씀. hashmap은 동기화 지원 x. treemap: key값으로 sorting. properties: (IO랑 연관) file에서 읽어서 key-value pair로 저장 (DB네임은 뭐고, ip는 뭐고 등등)
하나의 데이터(단일 객체)				쌍으로 된 데이터(key-value pair)
list 인터페이스 	set 인터페이스
선형 자료구조		집합: 요소 중복 X
				유일한 데이터들
				id, 사번, 학번
				hashSet, TreeSet(정렬)
				순서 X	
앞뒤관계 일대일	
배열
링크드리스트
스택
큐
순서가 있다
중복 O

필요할 때 특징에 맞는 것들 가져다 쓰면 됨 

iterator: 순회
		모든 요소를 처음부터 끝까지 돈다 
		이 인터페이스를 사용해서 모든 객체 순회 가능 (collection, map) 
		순서가 있는 애들한테 의미가 있다 
		for문으로 돌면서 get -> 순서가 있는 애들한테 의미가 있음
		hashset 같은 애들은 순서가 없음... get도 없음 (i번쨰 것 꺼내오는 것)
		
collection: 



# TreeSet class
-Tree가 붙으면 정렬을 하기 위한 것
-comparable / comparator 인터페이스 구현해야 

